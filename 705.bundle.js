(()=>{var __webpack_modules__={705:()=>{eval('function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// worker eventlistener. Do not change this.\n//#region\nself.addEventListener("message", function (e) {\n  self.postMessage(solve(e.data));\n}); //#endregion\n// your code goes below this line\n// ----------------------------------------------------------\n// Author: Aleksandr Kozlov (https://github.com/mr9d/)\n\nfunction createMaze(mazeInfo) {\n  var maze = new Array(mazeInfo.dimensions.rowNumber).fill([]);\n  maze = maze.map(function (_) {\n    return new Array(mazeInfo.dimensions.colNumber).fill(" ");\n  });\n  maze[mazeInfo.start[0]][mazeInfo.start[1]] = "s";\n  maze[mazeInfo.end[0]][mazeInfo.end[1]] = "e";\n  mazeInfo.walls.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        row = _ref2[0],\n        col = _ref2[1];\n\n    return maze[row][col] = "#";\n  });\n  return maze;\n}\n\nfunction cloneMaze(maze) {\n  var newMaze = [];\n  maze.forEach(function (row) {\n    newMaze.push(_toConsumableArray(row));\n  });\n  return newMaze;\n}\n\nfunction consoleMaze(maze) {\n  for (var row = 0; row < maze.length; row++) {\n    console.log(maze[row].join(""));\n  }\n}\n\nfunction checkRowCol(row, col, mazeInfo) {\n  return row >= 0 && col >= 0 && row < mazeInfo.dimensions.rowNumber && col < mazeInfo.dimensions.colNumber;\n}\n\nfunction getNearCells(row, col, mazeInfo) {\n  return [[row + 1, col], [row - 1, col], [row, col + 1], [row, col - 1]].filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        r = _ref4[0],\n        c = _ref4[1];\n\n    return checkRowCol(r, c, mazeInfo);\n  });\n}\n\nfunction hasWeight(row, col, maze) {\n  return maze[row][col] === "e" || +maze[row][col] > 0;\n}\n\nfunction getWeight(row, col, maze) {\n  if (maze[row][col] === "e") {\n    return 0;\n  }\n\n  if (+maze[row][col] > 0) {\n    return +maze[row][col];\n  }\n\n  return null;\n}\n\nfunction solve(mazeInfo) {\n  // main solve function\n  // â€‹\n  // mazeInfo is a JS object and it contains the following info:\n  // dimensions: Object { rowNumber: 278, colNumber: 165 } -- the number of rows and cols\n  // end: Array [ 180, 79 ] -- the coordinates of the end\n  // start: Array [ 142, 79 ] -- the coordinates of the start\n  // walls: [[0,1], [0,2]] -- array of coordinates of the walls\n  // this function must return an array of coordinates of the path (similar to the walls)\n  // Happy pathfinding! :)\n  // console.log(mazeInfo);\n  // console.log(mazeInfo.dimensions);\n  // console.log("start", mazeInfo.start);\n  // console.log("end", mazeInfo.end);\n  // console.log(mazeInfo.walls);\n  var maze = createMaze(mazeInfo); // calculating weights\n\n  var finished = false;\n\n  while (!finished) {\n    var nextStepMaze = cloneMaze(maze);\n    var cellUpdateCount = 0;\n\n    for (var row = 0; row < mazeInfo.dimensions.rowNumber; row++) {\n      for (var col = 0; col < mazeInfo.dimensions.colNumber; col++) {\n        if (maze[row][col] === " ") {\n          var nearCells = getNearCells(row, col, mazeInfo);\n          var withWeight = nearCells.filter(function (_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 2),\n                r = _ref6[0],\n                c = _ref6[1];\n\n            return hasWeight(r, c, maze);\n          });\n\n          if (withWeight.length > 0) {\n            var maxWeight = withWeight.map(function (_ref7) {\n              var _ref8 = _slicedToArray(_ref7, 2),\n                  r = _ref8[0],\n                  c = _ref8[1];\n\n              return getWeight(r, c, maze);\n            }).reduce(function (a, b) {\n              return Math.max(a, b);\n            });\n            nextStepMaze[row][col] = maxWeight + 1;\n            cellUpdateCount++;\n          }\n        }\n      }\n    }\n\n    maze = nextStepMaze;\n    finished = cellUpdateCount === 0;\n  } // looking for path based on weights\n\n\n  var path = [];\n  var coord = mazeInfo.start;\n\n  while (coord[0] !== mazeInfo.end[0] || coord[1] !== mazeInfo.end[1]) {\n    path.push(coord);\n\n    var _nearCells = getNearCells(coord[0], coord[1], mazeInfo);\n\n    var _withWeight = _nearCells.filter(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          r = _ref10[0],\n          c = _ref10[1];\n\n      return hasWeight(r, c, maze);\n    });\n\n    if (_withWeight.length === 0) {\n      // throw error?\n      break;\n    }\n\n    var cellWithMinWeight = _withWeight.reduce(function (a, b) {\n      return getWeight(a[0], a[1], maze) > getWeight(b[0], b[1], maze) ? b : a;\n    });\n\n    coord = cellWithMinWeight;\n  }\n\n  path.push(coord); //consoleMaze(maze);\n  //console.log(path);\n\n  return path;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///705\n')}},__webpack_exports__={};__webpack_modules__[705]()})();