(()=>{var __webpack_modules__={650:()=>{eval('/*\n https://github.com/asadovkamran\n*/\n// worker eventlistener. Do not change this.\n//#region\nself.addEventListener("message", function (e) {\n  self.postMessage(solve(e.data));\n}); //#endregion\n// your code goes below this line\n// ----------------------------------------------------------\n\nfunction solve(mazeInfo) {\n  // main solve function\n  // â€‹\n  // mazeInfo is a JS object and it contains the following info:\n  // dimensions: Object { rowNumber: 278, colNumber: 165 } -- the number of rows and cols\n  // end: Array [ 180, 79 ] -- the coordinates of the end\n  // start: Array [ 142, 79 ] -- the coordinates of the start\n  // walls: [[0,1], [0,2]] -- array of coordinates of the walls\n  // this function must return an array of coordinates of the path (similar to the walls)\n  // Happy pathfinding! :)\n  _ROWS = mazeInfo.dimensions.rowNumber;\n  _COLS = mazeInfo.dimensions.colNumber;\n  _START = mazeInfo.start;\n  _END = mazeInfo.end;\n  _SCANNED_MAZE = [];\n  var initialMaze = internalizeMaze(mazeInfo);\n  _SCANNED_MAZE = scanMaze(initialMaze, mazeInfo.start, mazeInfo.end);\n  console.log(JSON.stringify(_SCANNED_MAZE));\n  var result = buildPath();\n  return result;\n}\n\nfunction internalizeMaze(mazeInfo) {\n  var rows = mazeInfo.dimensions.rowNumber;\n  var cols = mazeInfo.dimensions.colNumber;\n  var walls = mazeInfo.walls;\n  var maze = [];\n\n  for (var i = 0; i < rows; i++) {\n    maze[i] = [];\n\n    for (var j = 0; j < cols; j++) {\n      maze[i][j] = 0;\n    }\n  }\n\n  walls.forEach(function (item) {\n    maze[item[0]][item[1]] = -1;\n  });\n  return maze;\n}\n\nfunction scanMaze(initialMaze, start, end) {\n  var nodesInProcess = [end];\n  var distance = 1;\n  initialMaze[end[0]][end[1]] = distance;\n\n  var _loop = function _loop() {\n    var newlyDiscvNodes = [];\n    nodesInProcess.forEach(function (item) {\n      newlyDiscvNodes = newlyDiscvNodes.concat(checkNeighbors(initialMaze, item));\n    });\n    nodesInProcess = removeDuplcDiscvNodes(newlyDiscvNodes); // console.log(JSON.stringify(nodesInProcess));\n\n    distance++;\n    nodesInProcess.forEach(function (item) {\n      initialMaze[item[0]][item[1]] = distance;\n    });\n  };\n\n  while (nodesInProcess.length > 0) {\n    _loop();\n  }\n\n  return initialMaze;\n}\n\nfunction getNeighborsOf(node) {\n  var x = node[0];\n  var y = node[1];\n  result = [];\n\n  for (var x_offset = -1; x_offset <= 1; x_offset++) {\n    for (var y_offset = -1; y_offset <= 1; y_offset++) {\n      // offset (0, 0) is the cell itself, so ignore it\n      if (x_offset === 0 && y_offset === 0) continue;\n      if (x_offset === 1 && y_offset === 1) continue;\n      if (x_offset === -1 && y_offset === -1) continue;\n      if (x_offset === 1 && y_offset === -1) continue;\n      if (x_offset === -1 && y_offset === 1) continue;\n\n      if (x + x_offset >= 0 && x + x_offset < _ROWS && y + y_offset >= 0 && y + y_offset < _COLS) {\n        result.push([x + x_offset, y + y_offset]);\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction checkNeighbors(initialMaze, node) {\n  var discoveredNodes = [];\n  var x = node[0];\n  var y = node[1];\n\n  for (var x_offset = -1; x_offset <= 1; x_offset++) {\n    for (var y_offset = -1; y_offset <= 1; y_offset++) {\n      // offset (0, 0) is the cell itself, so ignore it\n      if (x_offset === 0 && y_offset === 0) continue;\n      if (x_offset === 1 && y_offset === 1) continue;\n      if (x_offset === -1 && y_offset === -1) continue;\n      if (x_offset === 1 && y_offset === -1) continue;\n      if (x_offset === -1 && y_offset === 1) continue;\n\n      if (x + x_offset >= 0 && x + x_offset < _ROWS && y + y_offset >= 0 && y + y_offset < _COLS) {\n        if (initialMaze[x + x_offset][y + y_offset] === 0) discoveredNodes.push([x + x_offset, y + y_offset]);\n      }\n    }\n  }\n\n  return discoveredNodes;\n}\n\nfunction removeDuplcDiscvNodes(nodes) {\n  // console.log(nodes);\n  var result = [];\n  var obj = {};\n  nodes.forEach(function (item, index) {\n    if (!obj.hasOwnProperty(item.toString())) {\n      obj[item.toString()] = true;\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nfunction buildPath() {\n  // debugger;\n  var end = _END;\n  var start = _START;\n  var currentStep = start;\n  var nodesInProcess = [];\n  var result = [];\n\n  while (currentStep.toString() != end.toString()) {\n    nodesInProcess = getNeighborsOf(currentStep);\n    nodesInProcess.forEach(function (item) {\n      if (getValueAt(item) < getValueAt(currentStep) && getValueAt(item) != -1) {\n        currentStep = item;\n      }\n    });\n    result.push(currentStep);\n  }\n\n  console.log(JSON.stringify(result));\n  return result;\n}\n\nfunction getValueAt(node) {\n  var x = node[0];\n  var y = node[1];\n  return _SCANNED_MAZE[x][y];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///650\n')}},__webpack_exports__={};__webpack_modules__[650]()})();