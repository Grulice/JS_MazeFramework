(()=>{"use strict";var __webpack_modules__={367:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./src/utils.js\nfunction addMouseListenersToCell(htmlCell, maze) {\n  // press-drag listeners\n  htmlCell.addEventListener("mouseover", function (e) {\n    e.preventDefault();\n    var curpos = [this.mazeRow, this.mazeCol];\n\n    if (e.buttons === 1) {\n      if (e.shiftKey) {\n        maze.drawStart(curpos);\n      } else if (e.ctrlKey || e.metaKey) {\n        maze.drawEnd(curpos);\n      } else {\n        maze.drawWall(curpos);\n      }\n    } else if (e.buttons === 2) {\n      maze.eraseCell(curpos);\n    }\n  }); // For some reason, single clicks over cells are not handled by events above,\n  // so we have to write them out separately\n\n  htmlCell.addEventListener("click", function (e) {\n    e.preventDefault();\n    var curpos = [this.mazeRow, this.mazeCol];\n\n    if (e.shiftKey) {\n      maze.drawStart(curpos);\n    } else if (e.ctrlKey || e.metaKey) {\n      maze.drawEnd(curpos);\n    } else {\n      maze.drawWall(curpos);\n    }\n  });\n  htmlCell.addEventListener("contextmenu", function (e) {\n    e.preventDefault();\n    var curpos = [this.mazeRow, this.mazeCol];\n    maze.eraseCell(curpos);\n  });\n}\nfunction getCellDimensions(colsNum) {\n  return (window.innerHeight - 25) / colsNum;\n}\nfunction removeAllChildren(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n;// CONCATENATED MODULE: ./src/algos/index.js\nvar workers = {\n  astar: {\n    worker: new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(158), __webpack_require__.b)),\n    displayName: "A*"\n  },\n  mrgd: {\n    worker: new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(705), __webpack_require__.b)),\n    displayName: "MRGD"\n  },\n  wave_propagation: {\n    worker: new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(650), __webpack_require__.b)),\n    displayName: "Wave Propagation"\n  }\n};\n;// CONCATENATED MODULE: ./src/consts.js\nvar CELL_TYPES = {\n  EMPTY: 0,\n  WALL: 1,\n  START: 2,\n  END: 3,\n  PATH: 4\n};\nvar CELL_TYPE_STYLES = {\n  0: "cell-empty",\n  // empty\n  1: "cell-wall",\n  // wall\n  2: "cell-start",\n  // start\n  3: "cell-end",\n  // end\n  4: "cell-path" // path\n\n};\nvar RANDOM_MAZE_API_BASEURL = "https://api.noopschallenge.com/mazebot/";\n;// CONCATENATED MODULE: ./src/index.js\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\nHTMLTableCellElement.prototype.cellType = CELL_TYPES.EMPTY;\n\nHTMLTableCellElement.prototype.changeCellTypeTo = function (newType) {\n  this.cellType = newType;\n  this.className = CELL_TYPE_STYLES[this.cellType];\n};\n\nHTMLTableCellElement.prototype.mazeRow = 0;\nHTMLTableCellElement.prototype.mazeCol = 0;\nvar mainMazeTbl = document.querySelector("#maze-table");\nvar mazeContainer = document.querySelector(".maze-container");\nmainMazeTbl.addEventListener("dragstart", function (e) {\n  return e.preventDefault();\n});\nvar dimensionElems = {\n  rowInput: document.querySelector("#input-dims-rows"),\n  colInput: document.querySelector("#input-dims-cols"),\n  goButton: document.querySelector("#draw-maze-button")\n};\nvar randomMazeElems = {\n  minSizeSelect: document.querySelector("#rand-size-select-min"),\n  maxSizeSelect: document.querySelector("#rand-size-select-max"),\n  goButton: document.querySelector("#rand-get-maze")\n};\nvar algoSelectElems = {\n  algoSelect: document.querySelector("#algo-select"),\n  goButton: document.querySelector("#find-path-button")\n};\nvar pathInfoElems = {\n  errorLabel: document.querySelector("#error-label"),\n  pathLenCaption: document.querySelector("#path-length"),\n  execTimeCaption: document.querySelector("#exec-time")\n};\nvar loadingPlaque = document.querySelector("#loading-plaque"); // button eventlisteners\n\ndimensionElems.goButton.addEventListener("click", handleCreateMaze); // Main program\n\nvar maze;\nhandleCreateMaze();\nObject.entries(workers).forEach(function (entry) {\n  var _entry = _slicedToArray(entry, 2),\n      key = _entry[0],\n      workerInfo = _entry[1];\n\n  var workerOption = document.createElement("option");\n  workerOption.value = key;\n  workerOption.innerText = workerInfo.displayName;\n  algoSelectElems.algoSelect.append(workerOption);\n});\n\nfunction handleCreateMaze() {\n  var rowsNum = Number(dimensionElems.rowInput.value);\n  var colsNum = Number(dimensionElems.colInput.value);\n  createMaze(rowsNum, colsNum);\n}\n\nfunction createMaze(rowsNum, colsNum) {\n  maze = resetMaze();\n  removeAllChildren(mainMazeTbl);\n  maze.dimensions.rowNumber = rowsNum;\n  maze.dimensions.colNumber = colsNum;\n  var cellDims = getCellDimensions(colsNum);\n\n  for (var rowNumber = 0; rowNumber < rowsNum; rowNumber++) {\n    var curRow = [];\n    var htmlRow = mainMazeTbl.insertRow(rowNumber);\n\n    for (var colNumber = 0; colNumber < colsNum; colNumber++) {\n      // create an HTML cell\n      var curCell = htmlRow.insertCell(colNumber);\n      curCell.mazeRow = rowNumber;\n      curCell.mazeCol = colNumber;\n      curCell.style.height = cellDims + "px";\n      curCell.style.width = cellDims + "px";\n      addMouseListenersToCell(curCell, maze);\n      curRow.push(curCell);\n    }\n\n    maze.cells.push(curRow);\n  }\n}\n\nfunction resetMaze() {\n  return {\n    dimensions: {\n      rowNumber: 0,\n      colNumber: 0\n    },\n    cells: [],\n    walls: [],\n    path: [],\n    startCell: null,\n    endCell: null,\n    drawPath: function drawPath(pathArray) {\n      this.clearPath();\n\n      var _iterator = _createForOfIteratorHelper(pathArray),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var step = _step.value;\n          var targetCell = this.cells[step[0]][step[1]];\n\n          if (targetCell.cellType === CELL_TYPES.EMPTY) {\n            targetCell.changeCellTypeTo(CELL_TYPES.PATH);\n            this.path.push(targetCell);\n          } else {\n            console.warn("Skipping path at ".concat(step[0], ", ").concat(step[1], " because it\'s not an empty cell."));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    clearPath: function clearPath() {\n      var shifted = this.path.shift();\n\n      while (shifted) {\n        shifted.changeCellTypeTo(CELL_TYPES.EMPTY);\n        shifted = this.path.shift();\n      }\n    },\n    drawWall: function drawWall(pos) {\n      var targetCell = this.cells[pos[0]][pos[1]];\n\n      if (targetCell.cellType === CELL_TYPES.START) {\n        this.startCell = null;\n      }\n\n      if (targetCell.cellType === CELL_TYPES.END) {\n        this.endCell = null;\n      }\n\n      if (targetCell.cellType === CELL_TYPES.PATH) {\n        this.path = this.path.filter(function (pathCell) {\n          return !(pathCell.mazeRow === targetCell.mazeRow && pathCell.mazeCol === targetCell.mazeCol);\n        });\n      }\n\n      targetCell.changeCellTypeTo(CELL_TYPES.WALL);\n      this.walls.push([targetCell.mazeRow, targetCell.mazeCol]);\n    },\n    drawStart: function drawStart(pos) {\n      var targetCell = this.cells[pos[0]][pos[1]];\n\n      if (this.startCell) {\n        this.startCell.changeCellTypeTo(CELL_TYPES.EMPTY);\n      }\n\n      if (targetCell !== null) targetCell.changeCellTypeTo(CELL_TYPES.START);\n      this.startCell = targetCell;\n    },\n    drawEnd: function drawEnd(pos) {\n      var targetCell = this.cells[pos[0]][pos[1]];\n\n      if (this.endCell) {\n        this.endCell.changeCellTypeTo(CELL_TYPES.EMPTY);\n      }\n\n      if (targetCell !== null) targetCell.changeCellTypeTo(CELL_TYPES.END);\n      this.endCell = targetCell;\n    },\n    eraseCell: function eraseCell(pos) {\n      var targetCell = this.cells[pos[0]][pos[1]];\n\n      if (targetCell.cellType !== CELL_TYPES.EMPTY) {\n        if (targetCell.cellType === CELL_TYPES.START) {\n          this.startCell = null;\n        }\n\n        if (targetCell.cellType === CELL_TYPES.END) {\n          this.endCell = null;\n        }\n\n        targetCell.changeCellTypeTo(CELL_TYPES.EMPTY);\n        maze.walls = maze.walls.filter(function (cell) {\n          return !(cell[0] === targetCell.mazeRow && cell[1] === targetCell.mazeCol);\n        });\n      }\n    }\n  };\n} //#region random maze logic\n\n\nrandomMazeElems.goButton.addEventListener("click", handleRandomMaze);\n\nfunction handleRandomMaze() {\n  var minSize = Number(randomMazeElems.minSizeSelect.value);\n  var maxSize = Number(randomMazeElems.maxSizeSelect.value);\n  if (maxSize < minSize) maxSize = minSize;\n  drawRandomMaze(minSize, maxSize);\n}\n\nfunction drawRandomMaze(_x, _x2) {\n  return _drawRandomMaze.apply(this, arguments);\n} //#endregion\n// pathfinding algorithms connection logic\n\n\nfunction _drawRandomMaze() {\n  _drawRandomMaze = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(minSize, maxSize) {\n    var APIresponse, unparsed, parsed, dims, startpos, endpos, mazeMap, rowNum, row, colNum, cell;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            loadingPlaque.classList.remove("invisible");\n            APIresponse = fetch(RANDOM_MAZE_API_BASEURL + "random?minSize=".concat(minSize.toString(), "&maxSize=").concat(maxSize.toString()));\n            _context.next = 4;\n            return APIresponse;\n\n          case 4:\n            unparsed = _context.sent;\n            _context.next = 7;\n            return unparsed.json();\n\n          case 7:\n            parsed = _context.sent;\n            dims = parsed.map.length;\n            startpos = parsed.startingPosition.reverse();\n            endpos = parsed.endingPosition.reverse();\n            mazeMap = parsed.map;\n            createMaze(dims, dims);\n            maze.drawStart(startpos);\n            maze.drawEnd(endpos);\n\n            for (rowNum = 0; rowNum < mazeMap.length; rowNum++) {\n              row = mazeMap[rowNum];\n\n              for (colNum = 0; colNum < row.length; colNum++) {\n                cell = row[colNum];\n                if (cell === "X") maze.drawWall([rowNum, colNum]);\n              }\n            }\n\n            loadingPlaque.classList.add("invisible");\n\n          case 17:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _drawRandomMaze.apply(this, arguments);\n}\n\nalgoSelectElems.goButton.addEventListener("click", handleFindPath);\nvar execStartTime = -1;\n\nfunction handleFindPath() {\n  findPathUsingScript(algoSelectElems.algoSelect.value);\n}\n\nfunction findPathUsingScript(workerKey) {\n  if (!workerKey) return;\n  var worker = workers[workerKey].worker;\n  worker.addEventListener("message", function (e) {\n    if (e.data.length > 0) {\n      renderPerformanceInfo(e.data.length, Date.now());\n      maze.drawPath(e.data);\n    } else {\n      console.error("The algorithm didn\'t return a path");\n    }\n\n    loadingPlaque.classList.add("invisible");\n  });\n  var startPos = [maze.startCell.mazeRow, maze.startCell.mazeCol];\n  var endPos = [maze.endCell.mazeRow, maze.endCell.mazeCol];\n  execStartTime = Date.now();\n  loadingPlaque.classList.remove("invisible");\n  worker.postMessage({\n    dimensions: maze.dimensions,\n    start: startPos,\n    end: endPos,\n    walls: maze.walls\n  });\n}\n\nfunction renderPerformanceInfo(pathLength, execFinishTime) {\n  pathInfoElems.pathLenCaption.innerText = pathLength.toString();\n  pathInfoElems.execTimeCaption.innerText = (execFinishTime - execStartTime).toString() + " ms";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///367\n')}},__webpack_require__={};__webpack_require__.m=__webpack_modules__,__webpack_require__.u=Q=>Q+".bundle.js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var F=__webpack_require__.g.document;if(!Q&&F&&(F.currentScript&&(Q=F.currentScript.src),!Q)){var U=F.getElementsByTagName("script");U.length&&(Q=U[U.length-1].src)}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),__webpack_require__.b=document.baseURI||self.location.href;var __webpack_exports__={};__webpack_modules__[367](0,__webpack_exports__,__webpack_require__)})();