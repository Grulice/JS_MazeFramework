(()=>{var __webpack_modules__={877:module=>{eval("/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19tYXplZnJhbWV3b3JrLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJhbmRvbS5qcz9iZTU2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiODc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJhbmRvbTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///877\n")},612:module=>{eval("/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19tYXplZnJhbWV3b3JrLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanM/OWFmZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjYxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///612\n")},608:(module,__unused_webpack_exports,__webpack_require__)=>{eval("var baseRandom = __webpack_require__(877),\n    isIterateeCall = __webpack_require__(612),\n    toFinite = __webpack_require__(601);\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19tYXplZnJhbWV3b3JrLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9yYW5kb20uanM/MGY0MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxHQUFlO0FBQ3hDLHFCQUFxQixtQkFBTyxDQUFDLEdBQW1CO0FBQ2hELGVBQWUsbUJBQU8sQ0FBQyxHQUFZOztBQUVuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjYwOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlUmFuZG9tID0gcmVxdWlyZSgnLi9fYmFzZVJhbmRvbScpLFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gcmVxdWlyZSgnLi9faXNJdGVyYXRlZUNhbGwnKSxcbiAgICB0b0Zpbml0ZSA9IHJlcXVpcmUoJy4vdG9GaW5pdGUnKTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VGbG9hdCA9IHBhcnNlRmxvYXQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjcuMFxuICogQGNhdGVnb3J5IE51bWJlclxuICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ucmFuZG9tKDAsIDUpO1xuICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAqXG4gKiBfLnJhbmRvbSg1KTtcbiAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAqXG4gKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICpcbiAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAqL1xuZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG93ZXIgPSAwO1xuICAgIHVwcGVyID0gMTtcbiAgfVxuICBlbHNlIHtcbiAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgIGxvd2VyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgfVxuICB9XG4gIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICBsb3dlciA9IHVwcGVyO1xuICAgIHVwcGVyID0gdGVtcDtcbiAgfVxuICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICB9XG4gIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZG9tO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///608\n")},601:module=>{eval("/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19tYXplZnJhbWV3b3JrLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0Zpbml0ZS5qcz82NDI4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2MDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///601\n")},835:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n;// CONCATENATED MODULE: ./src/algos/index.ts\nvar workers = [\n    {\n        name: "wave_propagation",\n        worker: new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(650), __webpack_require__.b)),\n        displayName: "Wave Propagation",\n    },\n    {\n        name: "astar",\n        worker: new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(158), __webpack_require__.b)),\n        displayName: "A*",\n    },\n    {\n        name: "mrgd",\n        worker: new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(705), __webpack_require__.b)),\n        displayName: "MRGD",\n    },\n];\n\n;// CONCATENATED MODULE: ./src/elements.ts\nvar mainMazeTbl = document.querySelector("#maze-table");\nvar dimensionElems = {\n    rowInput: document.querySelector("#input-dims-rows"),\n    colInput: document.querySelector("#input-dims-cols"),\n    goButton: document.querySelector("#draw-maze-button"),\n};\nvar randomMazeElems = {\n    minSizeSelect: document.querySelector("#rand-size-select-min"),\n    maxSizeSelect: document.querySelector("#rand-size-select-max"),\n    goButton: document.querySelector("#rand-get-maze"),\n};\nvar algoSelectElems = {\n    algoSelect: document.querySelector("#algo-select"),\n    goButton: document.querySelector("#find-path-button"),\n};\nvar pathInfoElems = {\n    errorLabel: document.querySelector("#error-label"),\n    pathLenCaption: document.querySelector("#path-length"),\n    execTimeCaption: document.querySelector("#exec-time"),\n};\nvar loadingPlaque = document.querySelector("#loading-plaque");\n\n\n;// CONCATENATED MODULE: ./src/Maze/utils.ts\n\nfunction getCellDimensions(colsNum) {\n    return (window.innerHeight - 25) / colsNum;\n}\nfunction removeAllChildren(element) {\n    while (element.firstChild) {\n        element.removeChild(element.firstChild);\n    }\n}\nfunction showLoading() {\n    loadingPlaque.classList.remove("invisible");\n}\nfunction hideLoading() {\n    loadingPlaque.classList.add("invisible");\n}\n\n;// CONCATENATED MODULE: ./src/types.ts\nvar ECellType;\n(function (ECellType) {\n    ECellType[ECellType["EMPTY"] = 0] = "EMPTY";\n    ECellType[ECellType["WALL"] = 1] = "WALL";\n    ECellType[ECellType["START"] = 2] = "START";\n    ECellType[ECellType["END"] = 3] = "END";\n    ECellType[ECellType["PATH"] = 4] = "PATH";\n})(ECellType || (ECellType = {}));\n\n;// CONCATENATED MODULE: ./src/consts.ts\nvar _a;\n\nvar CELL_TYPE_STYLES = (_a = {},\n    _a[ECellType.EMPTY] = "cell-empty",\n    _a[ECellType.WALL] = "cell-wall",\n    _a[ECellType.START] = "cell-start",\n    _a[ECellType.END] = "cell-end",\n    _a[ECellType.PATH] = "cell-path",\n    _a);\nvar RANDOM_MAZE_API_BASEURL = "https://api.noopschallenge.com/mazebot/";\n\n;// CONCATENATED MODULE: ./src/Maze/MazeCell.ts\n\nvar MazeCell = /** @class */ (function () {\n    function MazeCell(position, type, htmlCell) {\n        this._type = type;\n        this.position = position;\n        this.HTMLCell = htmlCell;\n    }\n    Object.defineProperty(MazeCell.prototype, "type", {\n        get: function () {\n            return this._type;\n        },\n        set: function (newType) {\n            this._type = newType;\n            this.HTMLCell.className = CELL_TYPE_STYLES[newType];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return MazeCell;\n}());\n\n\n// EXTERNAL MODULE: ./node_modules/lodash/random.js\nvar random = __webpack_require__(608);\nvar random_default = /*#__PURE__*/__webpack_require__.n(random);\n;// CONCATENATED MODULE: ./src/Maze/index.ts\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n\n\n\n\n\nvar Maze = /** @class */ (function () {\n    function Maze(rows, cols, htmlTable) {\n        var _this = this;\n        this.map = [];\n        this.walls = [];\n        this.path = [];\n        this.setStart = function (cell) {\n            if (_this.startCell) {\n                _this.startCell.type = ECellType.EMPTY;\n            }\n            cell.type = ECellType.START;\n            _this.startCell = cell;\n        };\n        this.setEnd = function (cell) {\n            if (_this.endCell) {\n                _this.endCell.type = ECellType.EMPTY;\n            }\n            cell.type = ECellType.END;\n            _this.endCell = cell;\n        };\n        this.setWall = function (cell) {\n            if (cell.type === ECellType.START) {\n                _this.startCell = null;\n            }\n            if (cell.type === ECellType.END) {\n                _this.endCell = null;\n            }\n            cell.type = ECellType.WALL;\n            _this.walls.push(cell);\n        };\n        this.eraseCell = function (cell) {\n            if (cell.type === ECellType.EMPTY)\n                return;\n            if (cell.type === ECellType.START) {\n                _this.startCell = null;\n            }\n            if (cell.type === ECellType.END) {\n                _this.endCell = null;\n            }\n            cell.type = ECellType.EMPTY;\n            _this.walls = _this.walls.filter(function (wallCell) {\n                return !(wallCell.position.row === cell.position.row &&\n                    wallCell.position.col === cell.position.col);\n            });\n        };\n        this.drawPath = function (pathArray) {\n            _this.clearPath();\n            for (var _i = 0, pathArray_1 = pathArray; _i < pathArray_1.length; _i++) {\n                var _a = pathArray_1[_i], row = _a[0], col = _a[1];\n                var targetCell = _this.map[row][col];\n                if (targetCell.type === ECellType.EMPTY) {\n                    targetCell.type = ECellType.PATH;\n                    _this.path.push(targetCell);\n                }\n                else {\n                    console.warn("Skipped drawing a path at " + row + ", " + col + " because it\'s of type " + ECellType[targetCell.type] + ".");\n                }\n            }\n        };\n        this.clearPath = function () {\n            var shifted = _this.path.shift();\n            while (shifted) {\n                if (shifted.type === ECellType.PATH) {\n                    shifted.type = ECellType.EMPTY;\n                }\n                shifted = _this.path.shift();\n            }\n        };\n        this.drawingPoints = [];\n        this.handleDrawLine = function (cell, type) {\n            var curPoint = [cell.position.row, cell.position.col];\n            _this.drawingPoints.push(curPoint);\n            if (_this.drawingPoints.length > 1) {\n                var a = _this.drawingPoints.shift();\n                var b = _this.drawingPoints[0];\n                _this.drawLine(a, b, type);\n            }\n        };\n        this.resetDrawingPoints = function () {\n            _this.drawingPoints = [];\n        };\n        /**\n         * Interpolates and draws a line of cells between two points on the grid\n         * @param a starting point position\n         * @param b ending point position\n         * @param cellType the cell type that the line will be painted with\n         */\n        this.drawLine = function (a, b, cellType) {\n            var max = Math.max, abs = Math.abs, round = Math.round;\n            var offsetRow = b[0] - a[0];\n            var offsetCol = b[1] - a[1];\n            var delta = max(abs(offsetRow), abs(offsetCol));\n            var deltaRow = offsetRow / delta;\n            var deltaCol = offsetCol / delta;\n            var curRow = a[0];\n            var curCol = a[1];\n            var roundedRow = round(curRow);\n            var roundedCol = round(curCol);\n            do {\n                _this.setCell(_this.map[roundedRow][roundedCol], cellType);\n                curRow += deltaRow;\n                curCol += deltaCol;\n                roundedRow = round(curRow);\n                roundedCol = round(curCol);\n            } while (roundedRow !== b[0] || roundedCol !== b[1]);\n            _this.setCell(_this.map[b[0]][b[1]], cellType);\n        };\n        this.setCell = function (cell, type) {\n            switch (type) {\n                case ECellType.WALL:\n                    _this.setWall(cell);\n                    break;\n                case ECellType.EMPTY:\n                    _this.eraseCell(cell);\n                    break;\n                case ECellType.START:\n                    _this.setStart(cell);\n                    break;\n                case ECellType.END:\n                    _this.setEnd(cell);\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.rows = rows;\n        this.cols = cols;\n        this.htmlTable = htmlTable;\n        this.reset();\n    }\n    Maze.prototype.reset = function () {\n        var _a = this, cols = _a.cols, rows = _a.rows, htmlTable = _a.htmlTable;\n        removeAllChildren(this.htmlTable);\n        var cellDims = getCellDimensions(cols);\n        for (var row = 0; row < rows; row++) {\n            var curRow = [];\n            var htmlRow = htmlTable.insertRow(row);\n            for (var col = 0; col < cols; col++) {\n                var curCell = new MazeCell({ row: row, col: col }, ECellType.EMPTY, htmlRow.insertCell(col));\n                curCell.HTMLCell.style.height = cellDims + "px";\n                curCell.HTMLCell.style.width = cellDims + "px";\n                this.addMouseListenersToCell(curCell);\n                curRow.push(curCell);\n            }\n            this.map.push(curRow);\n        }\n    };\n    Maze.prototype.softReset = function () {\n        __spreadArray(__spreadArray([], this.walls), this.path).forEach(function (cell) {\n            cell.type = ECellType.EMPTY;\n        });\n        this.walls = [];\n        this.path = [];\n        this.eraseCell(this.startCell);\n        this.eraseCell(this.endCell);\n    };\n    Maze.prototype.solveUsing = function (algoName) {\n        var _this = this;\n        var execStartTime = Date.now();\n        return new Promise(function (resolve, reject) {\n            if (!algoName)\n                return reject("Invalid algorithm name");\n            var worker = workers.find(function (wrk) { return wrk.name === algoName; }).worker;\n            var workerHandler = function (e) {\n                var pathLength = e.data.length;\n                if (pathLength > 0) {\n                    resolve({\n                        pathLength: pathLength,\n                        execTimeMs: Date.now() - execStartTime,\n                    });\n                    _this.drawPath(e.data);\n                    worker.removeEventListener("message", workerHandler);\n                }\n                else {\n                    reject("The algorithm didn\'t return a path");\n                }\n            };\n            worker.addEventListener("message", workerHandler);\n            var mazeInfo = {\n                dimensions: { rowNumber: _this.rows, colNumber: _this.cols },\n                start: [\n                    _this.startCell.position.row,\n                    _this.startCell.position.col,\n                ],\n                end: [_this.endCell.position.row, _this.endCell.position.col],\n                walls: _this.walls.map(function (wallCell) { return [\n                    wallCell.position.row,\n                    wallCell.position.col,\n                ]; }),\n            };\n            worker.postMessage(mazeInfo);\n        });\n    };\n    Maze.prototype.generateRandom = function () {\n        this.softReset();\n        for (var i = 0; i < Math.round((this.rows * this.cols) / 3); i++) {\n            var randRow = random_default()(this.rows - 1);\n            var randCol = random_default()(this.cols - 1);\n            var target = this.map[randRow][randCol];\n            this.setWall(target);\n        }\n    };\n    Maze.prototype.addMouseListenersToCell = function (cell) {\n        var _this = this;\n        cell.HTMLCell.addEventListener("mouseenter", function (e) {\n            e.preventDefault();\n            if (e.buttons === 1) {\n                if (e.shiftKey) {\n                    _this.setStart(cell);\n                }\n                else if (e.ctrlKey || e.metaKey) {\n                    _this.setEnd(cell);\n                }\n                else {\n                    _this.handleDrawLine(cell, ECellType.WALL);\n                }\n            }\n            else if (e.buttons === 2) {\n                _this.handleDrawLine(cell, ECellType.EMPTY);\n            }\n        });\n        // For some reason, single clicks over cells are not handled by events above,\n        // so we have to write them out separately\n        cell.HTMLCell.addEventListener("mousedown", function (e) {\n            e.preventDefault();\n            if (e.shiftKey) {\n                _this.setStart(cell);\n            }\n            else if (e.ctrlKey || e.metaKey) {\n                _this.setEnd(cell);\n            }\n            else {\n                _this.setWall(cell);\n            }\n        });\n        cell.HTMLCell.addEventListener("contextmenu", function (e) {\n            e.preventDefault();\n            _this.eraseCell(cell);\n        });\n    };\n    return Maze;\n}());\n\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\nworkers.forEach(function (worker) {\n    var name = worker.name, displayName = worker.displayName;\n    var workerOption = document.createElement("option");\n    workerOption.value = name;\n    workerOption.innerText = displayName;\n    algoSelectElems.algoSelect.append(workerOption);\n});\nmainMazeTbl.addEventListener("dragstart", function (e) { return e.preventDefault(); });\ndimensionElems.goButton.addEventListener("click", handleCreateMaze);\nalgoSelectElems.goButton.addEventListener("click", handleFindPath);\nrandomMazeElems.goButton.addEventListener("click", handleRandomMaze);\nvar maze;\nmainMazeTbl.addEventListener("mouseleave", function () { return maze.resetDrawingPoints(); });\nmainMazeTbl.addEventListener("mouseup", function () { return maze.resetDrawingPoints(); });\nhandleCreateMaze();\nfunction handleCreateMaze() {\n    var rowsNum = Number(dimensionElems.rowInput.value);\n    var colsNum = Number(dimensionElems.colInput.value);\n    if (maze && rowsNum === maze.rows && colsNum === maze.cols) {\n        maze.softReset();\n    }\n    else {\n        maze = new Maze(rowsNum, colsNum, mainMazeTbl);\n    }\n}\nfunction handleRandomMaze() {\n    maze.generateRandom();\n}\nfunction handleFindPath() {\n    showLoading();\n    maze.solveUsing(algoSelectElems.algoSelect.value)\n        .then(function (results) {\n        var pathLength = results.pathLength, execTimeMs = results.execTimeMs;\n        renderPerformanceInfo(pathLength, execTimeMs);\n    })\n        .catch(function (err) {\n        console.error(err);\n    })\n        .finally(function () { return hideLoading(); });\n}\nfunction renderPerformanceInfo(pathLength, execTime) {\n    pathInfoElems.pathLenCaption.innerText = pathLength.toString();\n    pathInfoElems.execTimeCaption.innerText = execTime.toString() + " ms";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///835\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.u=Q=>Q+".bundle.js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var U=__webpack_require__.g.document;if(!Q&&U&&(U.currentScript&&(Q=U.currentScript.src),!Q)){var F=U.getElementsByTagName("script");F.length&&(Q=F[F.length-1].src)}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),__webpack_require__.b=document.baseURI||self.location.href;var __webpack_exports__=__webpack_require__(835)})();