(()=>{var __webpack_modules__={158:()=>{eval('function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// worker eventlistener. Do not change this.\n//#region\nself.addEventListener("message", function (e) {\n  self.postMessage(solve(e.data));\n}); //#endregion\n// your code goes below this line\n// ----------------------------------------------------------\n// Author: Javid Bunyadzade (https://github.com/Grulice)\n\nfunction solve(mazeInfo) {\n  // main solve function\n  // â€‹\n  // mazeInfo is a JS object and it contains the following info:\n  // dimensions: Object { rowNumber: 278, colNumber: 165 } -- the number of rows and cols\n  // end: Array [ 180, 79 ] -- the coordinates of the end\n  // start: Array [ 142, 79 ] -- the coordinates of the start\n  // walls: [[0,1], [0,2]] -- array of coordinates of the walls\n  // this function must return an array of coordinates of the path (similar to the walls)\n  // Happy pathfinding! :)\n  return solveAStar(mazeInfo);\n}\n\nvar nodeTypes = {\n  EMPTY: 0,\n  WALL: 1,\n  START: 2,\n  END: 3\n};\n\nfunction solveAStar(mazeInfo) {\n  var graph = initiateGraph(mazeInfo); // initialize the notTested list\n\n  graph.startNode.localScore = 0;\n  graph.startNode.globalScore = heuristic(graph.startNode, graph.endNode);\n  var notTested = [graph.startNode];\n  var currentNode = graph.startNode; // continue while there are unexplored nodes OR we\'ve hit the end\n  // this does not guarantee the shortest path, but it\'s a performance improvement\n  // and you\'ll most likely be on the shortest path. If you want to explore all\n  // nodes and 100% get the shortest path - remove the currentNode != graph.endNode condition\n\n  while (notTested.length > 0 && currentNode != graph.endNode) {\n    // sort the array by the global heuristic (check nodes that are physically\n    // closer to the end first)\n    notTested.sort(function (nodeA, nodeB) {\n      return nodeA.globalScore > nodeB.globalScore;\n    }); // shift the notTested and test that node. We won\'t visit a node\n    // more than once\n\n    currentNode = notTested.shift();\n    currentNode.visited = true;\n\n    var _iterator = _createForOfIteratorHelper(getNodeNeighbors(currentNode, graph)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var neighbor = _step.value;\n\n        // only add the neighbor node if it hasn\'t been visited, it\'s not a wall\n        // or if it is not already in the list\n        if (!neighbor.visited && neighbor.type !== nodeTypes.WALL && !notTested.includes(neighbor)) {\n          notTested.push(neighbor);\n        } // calculate the potential local score. The actual algo\n        // should compute the edge\'s weight between 2 nodes, but we can optimize\n        // because our graph is a grid and all edge weights are 1\n\n\n        curLocalScore = currentNode.localScore + 1;\n\n        if (neighbor.localScore > curLocalScore) {\n          // update the neighbor if the current computed local score is lower\n          // than the neighbors own local score\n          neighbor.parent = currentNode;\n          neighbor.localScore = curLocalScore; // the global score is calculated from how difficult it is to get to this cell so far PLUS\n          // the direct distance to the end, so that there\'s bias towards the nodes that are physically closer\n          // to the end\n\n          neighbor.globalScore = curLocalScore + heuristic(neighbor, graph.endNode);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } // backtrack starting from the end\n\n\n  currentNode = graph.endNode;\n  var finalPath = [];\n\n  while (currentNode.parent) {\n    finalPath.push([currentNode.row, currentNode.col]);\n    currentNode = currentNode.parent;\n  }\n\n  return finalPath;\n}\n\nfunction initiateGraph(mazeInfo) {\n  var resultGraph = [];\n  var rowsN = mazeInfo.dimensions.rowNumber;\n  var colsN = mazeInfo.dimensions.colNumber;\n  var startNode = null,\n      endNode = null;\n\n  var _loop = function _loop(curRowNum) {\n    var curRow = [];\n\n    var _loop2 = function _loop2(curColNum) {\n      var newNode = createNode(curRowNum, curColNum);\n\n      if (curRowNum === mazeInfo.start[0] && curColNum === mazeInfo.start[1]) {\n        newNode.type = nodeTypes.START;\n        startNode = newNode;\n      } else if (curRowNum === mazeInfo.end[0] && curColNum === mazeInfo.end[1]) {\n        newNode.type = nodeTypes.END;\n        endNode = newNode;\n      } else if (mazeInfo.walls.find(function (wall) {\n        return wall[0] === curRowNum && wall[1] === curColNum;\n      })) {\n        newNode.type = nodeTypes.WALL;\n      } else {\n        newNode.type = nodeTypes.EMPTY;\n      }\n\n      curRow.push(newNode);\n    };\n\n    for (var curColNum = 0; curColNum < colsN; curColNum++) {\n      _loop2(curColNum);\n    }\n\n    resultGraph.push(curRow);\n  };\n\n  for (var curRowNum = 0; curRowNum < rowsN; curRowNum++) {\n    _loop(curRowNum);\n  }\n\n  return {\n    nodes: resultGraph,\n    startNode: startNode,\n    endNode: endNode\n  };\n}\n\nfunction createNode(rowNum, colNum) {\n  return {\n    type: nodeTypes.EMPTY,\n    visited: false,\n    globalScore: Number.POSITIVE_INFINITY,\n    localScore: Number.POSITIVE_INFINITY,\n    row: rowNum,\n    col: colNum,\n    parent: null\n  };\n}\n\nfunction heuristic(nodeA, nodeB) {\n  return distance(nodeA, nodeB);\n}\n\nfunction distance(nodeA, nodeB) {\n  // find distance using Pythagoras\' theorem\n  var sideA = nodeA.row - nodeB.row + 1;\n  var sideB = nodeA.col - nodeB.col + 1;\n  return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));\n}\n\nfunction getNodeNeighbors(node, graph) {\n  var neighbors = [];\n  var offsets = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n\n  for (var _i = 0, _offsets = offsets; _i < _offsets.length; _i++) {\n    var offset = _offsets[_i];\n    var targetCoordRow = node.row + offset[0];\n    var targetCoordCol = node.col + offset[1];\n\n    if (targetCoordRow >= 0 && targetCoordRow < graph.nodes.length && targetCoordCol >= 0 && targetCoordCol < graph.nodes[0].length) {\n      neighbors.push(graph.nodes[targetCoordRow][targetCoordCol]);\n    }\n  }\n\n  return neighbors;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///158\n')}},__webpack_exports__={};__webpack_modules__[158]()})();